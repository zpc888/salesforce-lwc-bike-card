import { createElement } from 'lwc';
import AnalogClock from 'c/analogClock';

describe('c-analog-clock', () => {
    afterEach(() => {
        // The jsdom instance is shared across test cases in a single file so reset the DOM
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('TODO: test case generated by CLI command, please fill in test logic', () => {
        // Arrange
        const element = createElement('c-analog-clock', {
            is: AnalogClock
        });

        // Act
        document.body.appendChild(element);

        // Assert
        // const div = element.shadowRoot.querySelector('div');
        expect(1).toBe(1);
    });
});


    /*
async getTimezone() {
    try {
      const geocodingApiKey = 'YOUR_GOOGLE_GEOCODING_API_KEY';
      const timezoneApiKey = 'YOUR_GOOGLE_TIMEZONE_API_KEY';

      // Step 1: Get coordinates (latitude and longitude) from the address using the Geocoding API
      const geocodingUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(
        this.contactAddress
      )}&key=${geocodingApiKey}`;

      const geocodingResponse = await fetch(geocodingUrl);
      const geocodingData = await geocodingResponse.json();

      if (geocodingData.results.length > 0) {
        const { lat, lng } = geocodingData.results[0].geometry.location;

        // Step 2: Get timezone information using the Time Zone API
        const timezoneUrl = `https://maps.googleapis.com/maps/api/timezone/json?location=${lat},${lng}&timestamp=${Math.floor(
          Date.now() / 1000
        )}&key=${timezoneApiKey}`;

        const timezoneResponse = await fetch(timezoneUrl);
        const timezoneData = await timezoneResponse.json();

        if (timezoneData.timeZoneId) {
          // Step 3: Use Luxon to handle timezone conversions
          this.timezone = timezoneData.timeZoneId;
          // You can use the timezone with Luxon to convert dates and times as needed.
        } else {
          this.timezone = 'Timezone data not available';
        }
      } else {
        this.timezone = 'Invalid address';
      }
    } catch (error) {
      this.timezone = 'Error fetching timezone';
      console.error(error);
    }
  }    
*/

//   function getCurrentTimeInTimezone(timezone) {
//   const now = new Date();
//   const options = { timeZone: timezone, hour12: false, hour: 'numeric', minute: 'numeric', second: 'numeric' };
//   const formatter = new Intl.DateTimeFormat('en-US', options);
//   const parts = formatter.formatToParts(now);

//   // Extract the time components and format the time string
//   const hour = parts.find(part => part.type === 'hour').value;
//   const minute = parts.find(part => part.type === 'minute').value;
//   const second = parts.find(part => part.type === 'second').value;

//   const currentTimeInTimezone = `${hour}:${minute}:${second}`;

//   return currentTimeInTimezone;
// }

// const timezone = 'America/New_York'; // Replace this with the desired timezone
// const currentTimeInTimezone = getCurrentTimeInTimezone(timezone);
// console.log(currentTimeInTimezone); // Output will be the current time in the specified timezone (e.g., "17:30:45")